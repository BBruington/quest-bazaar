generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String       @id @default(cuid())
  clerkId                String       @unique
  username               String?      @unique
  email                  String       @unique
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  characters             Character[]
  campaignplayer         Campaign[]   @relation("CampaignPlayers")
  campaigndm             Campaign[]   @relation("CampaignDm")
  invitedCampaigns       Campaign[]   @relation("InvitedGame")
  userPosts              Post[]
  likes                  Like[]
  comments               Comment[]
  sentFriendRequests     Friendship[] @relation("sentRequests")
  receivedFriendRequests Friendship[] @relation("receivedRequests")
  sentMessages           Message[]    @relation("sender")
  receivedMessages       Message[]    @relation("recipient")
}

model Friendship {
  id           String           @id @default(cuid())
  senderId     String
  senderName   String
  receiverId   String
  receiverName String
  status       FriendshipStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sender       User             @relation("sentRequests", fields: [senderId], references: [clerkId])
  receiver     User             @relation("receivedRequests", fields: [receiverId], references: [clerkId])
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  senderId    String
  recipientId String
  sentAt      DateTime @default(now())
  sender      User     @relation("sender", fields: [senderId], references: [clerkId])
  recipient   User     @relation("recipient", fields: [recipientId], references: [clerkId])
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  author      String
  mainImage   String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  campaignId  String?
  user        User      @relation(fields: [userId], references: [clerkId])
  likes       Like[]
  comments    Comment[]
  campaign    Campaign? @relation("CampaignPosts", fields: [campaignId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Campaign {
  id             String              @id @default(cuid())
  name           String
  description    String
  image          String?
  password       String?
  dmUserId       String
  dmName         String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  dmNotes        CampaignNote[]
  schedules      CampaignSchedules[]
  chat           CampaignChat[]
  posts          Post[]              @relation("CampaignPosts")
  dm             User?               @relation("CampaignDm", fields: [dmUserId], references: [clerkId])
  players        User[]              @relation("CampaignPlayers")
  invitedPlayers User[]              @relation("InvitedGame")
}

model CampaignChat {
  id         String   @id @default(cuid())
  campaignId String
  username String
  chat       String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignSchedules {
  id             String @id @default(cuid())
  campaignId     String
  time           String
  date           String
  scheduledEvent String

  campaign Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignNote {
  id         String   @id @default(cuid())
  campaignId String
  userId     String?
  public     Boolean?
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Character {
  id                String   @id @default(cuid())
  name              String
  race              String
  class             String
  level             Int
  background        String
  alignment         String
  experiencePoints  Int
  maxHitPoints      Int
  currentHitPoints  Int
  tempHitPoints     Int
  armorClass        Int
  initiative        Int
  speed             Int
  inspiration       Boolean
  proficiencyBonus  Int
  personalityTraits String
  ideals            String
  bonds             String
  flaws             String
  features          String
  languages         String
  abilityScores     Json
  skills            Json
  savingThrows      Json
  abilities         Json
  spells            Json
  equipment         Json
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model CampaignPlayers {
  A String
  B String

  @@unique([A, B], map: "_CampaignPlayers_AB_unique")
  @@index([B], map: "_CampaignPlayers_B_index")
  @@map("_CampaignPlayers")
}

model InvitedGame {
  A String
  B String

  @@unique([A, B], map: "_InvitedGame_AB_unique")
  @@index([B], map: "_InvitedGame_B_index")
  @@map("_InvitedGame")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}
