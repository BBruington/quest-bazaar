// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(cuid())
  externalId String   @unique
  username   String?  @unique
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  characters Character[]

  campaignplayer Campaign[] @relation("CampaignPlayers")
  campaigndm     Campaign[] @relation("CampaignDm")

  userPosts UserPost[]
  likes     Like[]
  comments  Comment[]

  sentFriendRequests     Friendship[] @relation("sentRequests")
  receivedFriendRequests Friendship[] @relation("receivedRequests")

  sentMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("recipient")
}

model Friendship {
  id           String           @id @default(cuid())
  senderId     String
  senderName   String           
  receiverId   String
  receiverName String
  status       FriendshipStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sender       User             @relation("sentRequests", fields: [senderId], references: [externalId])
  receiver     User             @relation("receivedRequests", fields: [receiverId], references: [externalId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  senderId    String
  recipientId String
  sentAt      DateTime @default(now())
  sender      User     @relation("sender", fields: [senderId], references: [externalId])
  recipient   User     @relation("recipient", fields: [recipientId], references: [externalId])
}

model UserPost {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  author      String
  mainImage   String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  post      UserPost @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      UserPost @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String
  image       String?
  password    String?
  dmUserId    String
  dmName      String?
  dmNotes     CampaignNote[]
  dm          User?          @relation(fields: [dmUserId], references: [externalId], name: "CampaignDm")
  players     User[]         @relation("CampaignPlayers")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CampaignNote {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Character {
  id                String   @id @default(cuid())
  name              String
  race              String
  class             String
  level             Int
  background        String
  alignment         String
  experiencePoints  Int
  maxHitPoints      Int
  currentHitPoints  Int
  tempHitPoints     Int
  armorClass        Int
  initiative        Int
  speed             Int
  inspiration       Boolean
  proficiencyBonus  Int
  personalityTraits String
  ideals            String
  bonds             String
  flaws             String
  features          String
  languages         String
  abilityScores     Json
  skills            Json
  savingThrows      Json
  abilities         Json
  spells            Json
  equipment         Json
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
